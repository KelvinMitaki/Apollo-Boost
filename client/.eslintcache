[{"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\index.tsx":"1","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\queries\\fetchAllCategories.ts":"3","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\App.tsx":"4","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\Auth\\Signin.tsx":"5","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\Auth\\Signup.tsx":"6","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\mutations\\signupUser.ts":"7","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\mutations\\signinUser.ts":"8","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\queries\\getCurrentUser.ts":"9","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\context\\UserContext.ts":"10","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\HOCs\\withAuth.tsx":"11"},{"size":1767,"mtime":1608065923225,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":220,"mtime":1608036478108,"results":"15","hashOfConfig":"13"},{"size":653,"mtime":1608065576292,"results":"16","hashOfConfig":"13"},{"size":1898,"mtime":1608065447846,"results":"17","hashOfConfig":"13"},{"size":2715,"mtime":1608065447792,"results":"18","hashOfConfig":"13"},{"size":283,"mtime":1608043282192,"results":"19","hashOfConfig":"13"},{"size":218,"mtime":1608049947855,"results":"20","hashOfConfig":"13"},{"size":314,"mtime":1608064137630,"results":"21","hashOfConfig":"13"},{"size":140,"mtime":1608064879663,"results":"22","hashOfConfig":"13"},{"size":481,"mtime":1608065630072,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1knq99q",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\index.tsx",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\reportWebVitals.ts",[],["49","50"],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\queries\\fetchAllCategories.ts",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\App.tsx",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\Auth\\Signin.tsx",["51"],"import { ApolloError } from \"apollo-boost\";\r\nimport React, { useState } from \"react\";\r\nimport { useMutation } from \"react-apollo\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { SIGN_IN_USER } from \"../../mutations/signinUser\";\r\n\r\nconst Signin: React.FC<RouteComponentProps> = props => {\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [error, setError] = useState<ApolloError | null>(null);\r\n  const [signinUser, { data }] = useMutation(SIGN_IN_USER, {\r\n    onError: e => setError(e),\r\n    onCompleted: dat => {\r\n      console.log(dat);\r\n      localStorage.setItem(\"token\", dat.signinUser.token);\r\n      props.history.push(\"/\");\r\n    }\r\n  });\r\n  const onSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (email.trim().length !== 0 && password.trim().length > 5) {\r\n      signinUser({ variables: { email, password } });\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <h2 className=\"App\">Signin</h2>\r\n      <form className=\"form\" onSubmit={onSubmit}>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n          value={email}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={e => setPassword(e.target.value)}\r\n          value={password}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <button type=\"submit\" className=\"button-primary\">\r\n          Submit\r\n        </button>\r\n        {error &&\r\n          error.graphQLErrors.map(e => <p key={e.message}>{e.message}</p>)}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signin);\r\n","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\Auth\\Signup.tsx",["52"],"import { ApolloError } from \"apollo-boost\";\r\nimport React, { useState } from \"react\";\r\nimport { useMutation } from \"react-apollo\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { SIGN_UP_USER } from \"../../mutations/signupUser\";\r\n\r\nconst Signup: React.FC<RouteComponentProps> = props => {\r\n  const [username, setUsername] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState<string>(\"\");\r\n  const [error, setError] = useState<ApolloError | null>(null);\r\n  const [signUpUser, { data }] = useMutation(SIGN_UP_USER, {\r\n    onError: e => setError(e),\r\n    onCompleted: dat => {\r\n      console.log(dat);\r\n      localStorage.setItem(\"token\", dat.signupUser.token);\r\n      props.history.push(\"/\");\r\n    }\r\n  });\r\n  const onSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (\r\n      username.trim().length !== 0 &&\r\n      email.trim().length !== 0 &&\r\n      password.trim().length > 5 &&\r\n      password === confirmPassword\r\n    ) {\r\n      signUpUser({ variables: { username, email, password } });\r\n      setEmail(\"\");\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n      setConfirmPassword(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <h2 className=\"App\">Signup</h2>\r\n      <form className=\"form\" onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          placeholder=\"Username\"\r\n          onChange={e => setUsername(e.target.value)}\r\n          value={username}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={e => setEmail(e.target.value)}\r\n          value={email}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Password\"\r\n          onChange={e => setPassword(e.target.value)}\r\n          value={password}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"confirmPassword\"\r\n          placeholder=\"Confirm Password\"\r\n          onChange={e => setConfirmPassword(e.target.value)}\r\n          value={confirmPassword}\r\n          onFocus={() => error && setError(null)}\r\n        />\r\n        <button type=\"submit\" className=\"button-primary\">\r\n          Submit\r\n        </button>\r\n        {error &&\r\n          error.graphQLErrors.map(e => <p key={e.message}>{e.message}</p>)}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signup);\r\n","C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\mutations\\signupUser.ts",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\mutations\\signinUser.ts",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\queries\\getCurrentUser.ts",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\context\\UserContext.ts",[],"C:\\Users\\mitaki\\Desktop\\GraphQL\\Apollo-Boost\\client\\src\\components\\HOCs\\withAuth.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":11,"column":24,"nodeType":"59","messageId":"60","endLine":11,"endColumn":28},{"ruleId":"57","severity":1,"message":"58","line":13,"column":24,"nodeType":"59","messageId":"60","endLine":13,"endColumn":28},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]